# All this present in this build do not define the environment to be used, so the build
# command must include the --env (or -e) flag to specify one

# This preset builds the sbs build system in release mode
preset release {
    envs: [ win-cmd, linux-bash ],
    toolchains: [ clang, gcc, msvc ],
    config: clang-release,
    targets: [ sbs, sbs-tests ],
    actions: {
        before: [ copy-fllib ]
    }
}

# This preset builds the sbs build system in debug mode
preset debug {
    envs: [ win-cmd, linux-bash ],
    toolchains: [ clang, gcc, msvc ],
    config: clang-debug,
    targets: [ sbs, sbs-tests ],
    actions: {
        before: [ copy-fllib ]
    }
}

# This preset builds the sbs build system in debug mode
preset tests {
    envs: [ win-cmd, linux-bash ],
    toolchains: [ clang, gcc, msvc ],
    config: clang-debug,
    target: sbs-tests,
    actions: {
        before: [ copy-fllib ]
    }
}

# This is a dummy preset to hack my own build system. We get a clean action for free by running:
# sbs build -e=<win-cmd|linux-bash> clean
preset clean {
    envs: [ win-cmd, linux-bash ],
    toolchain: dummy,
    config: dummy,
    target: dummy,
    actions: {
        before: [ clean ]
    }
}

preset copy-fllib {
    envs: [ win-cmd, linux-bash ],
    toolchain: dummy,
    config: dummy,
    target: dummy,
    actions: {
        before: [ copy-fllib ]
    }
}

preset install {
    envs: [ win-cmd, linux-bash ],
    toolchain: dummy,
    config: dummy,
    target: dummy,
    actions: {
        before: [ install ]
    }
}
